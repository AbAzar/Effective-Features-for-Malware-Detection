import glob

directory_benign = r'C:\...\*.txt'

directory_virus = r'C:\...\*.txt'

dic = {}
def map_file(d):
    txtfiles = []
    for file in glob.glob(d):
        txtfiles.append(file)
    print(txtfiles)
    j = 0
    mapped_files_B = []
    for filename in txtfiles:
        with open(filename, "r") as file:
            lines = file.readlines()
            newfilename = filename+'.map'
            with open(newfilename, 'w') as newfile:
                for line in lines:
                    opcode = line.strip()
                    if opcode not in dic:
                        dic[opcode] = j
                        j = j+1
                    newfile.write(str(dic[opcode]) + '\n')
                mapped_files_B.append(newfile)
    print(dic)
    return mapped_files_B


dictionary = {'iput-object': 0, 'invoke-direct': 1, 'return-void': 2, 'sget-object': 3, 'iget-object': 4, 'invoke-virtual': 5, 'invoke-static': 6, 'new-instance': 7,
              'const-string': 8, 'if-nez': 9, 'move-result-object': 10, 'move-result': 11, 'if-eqz': 12, 'move-result-wide': 13, 'cmp-long': 14, 'if-ltz': 15, 'if-lez': 16,
              'const/4': 17, 'array-length': 18, 'goto': 19, 'move-exception': 20, 'move-object': 21, 'goto/16': 22, 'invoke-super': 23, 'sput-object': 24, 'sget-boolean': 25,
              'const/16': 26, 'return': 27, 'new-array': 28, 'sparse-switch': 29, 'if-ne': 30, 'iget-wide': 31, 'sparse-switch-payload': 32, 'invoke-interface': 33, 'check-cast': 34,
              'sput': 35, 'sput-boolean': 36, 'monitor-enter': 37, 'iget': 38, 'sget': 39, 'sub-int/2addr': 40, 'monitor-exit': 41, 'return-object': 42, 'throw': 43, 'iput': 44, 'add-int/lit8': 45,
              'if-eq': 46, 'const': 47, 'aget': 48, 'div-float/2addr': 49, 'float-to-int': 50, 'fill-array-data': 51, 'aput-object': 52, 'if-ge': 53, 'aget-object': 54, 'nop': 55, 'fill-array-data-payload': 56,
              'iget-boolean': 57, 'move': 58, 'iput-boolean': 59, 'move-object/from16': 60, 'aput': 61, 'invoke-interface/range': 62, 'if-gtz': 63, 'invoke-virtual/range': 64, 'move/from16': 65, 'invoke-direct/range': 66,
              'const-class': 67, 'iput-char': 68, 'iget-char': 69, 'add-int': 70, 'add-float': 71, 'sub-float': 72, 'const/high16': 73, 'mul-float': 74, 'cmpl-float': 75, 'invoke-static/range': 76, 'const-wide/high16': 77, 'mul-double': 78,
              'const-wide': 79, 'div-double': 80, 'move-wide/from16': 81, 'double-to-int': 82, 'neg-double': 83, 'sub-double': 84, 'add-double': 85, 'int-to-double': 86, 'double-to-float': 87, 'float-to-double': 88, 'add-double/2addr': 89,
              'neg-float': 90, 'const-wide/16': 91, 'cmpl-double': 92, 'cmpg-double': 93, 'if-gez': 94, 'div-double/2addr': 95, 'mul-double/2addr': 96, 'sub-float/2addr': 97, 'mul-float/2addr': 98, 'add-float/2addr': 99, 'if-le': 100,
              'sub-int': 101, 'or-int/2addr': 102, 'mul-int/2addr': 103, 'instance-of': 104, 'int-to-float': 105, 'div-float': 106, 'rem-float': 107, 'if-lt': 108, 'packed-switch': 109, 'packed-switch-payload': 110, 'shl-int': 111,
              'xor-int/lit8': 112, 'and-int/2addr': 113, 'sub-long': 114, 'long-to-float': 115, 'if-gt': 116, 'add-int/2addr': 117, 'mul-int/lit8': 118, 'invoke-super/range': 119, 'move-wide': 120, 'iput-wide': 121, 'return-wide': 122,
              'and-int/lit8': 123, 'or-int/lit8': 124, 'and-int/lit16': 125, 'shl-int/2addr': 126, 'mul-int/lit16': 127, 'int-to-long': 128, 'mul-int': 129, 'const-wide/32': 130, 'rem-float/2addr': 131, 'div-int/lit8': 132, 'aget-wide': 133,
              'aput-wide': 134, 'cmpg-float': 135, 'long-to-int': 136, 'sub-double/2addr': 137, 'rsub-int': 138, 'div-int/lit16': 139, 'div-int/2addr': 140, 'shl-int/lit8': 141, 'and-long/2addr': 142, 'or-int/lit16': 143, 'float-to-long': 144,
              'add-long/2addr': 145, 'ushr-int/lit8': 146, 'aput-byte': 147, 'aget-byte': 148, 'and-int': 149, 'aget-char': 150, 'div-int': 151, 'xor-int/2addr': 152, 'shr-int/lit8': 153, 'aput-char': 154, 'rem-long': 155, 'div-long': 156,
              'long-to-double': 157, 'neg-long': 158, 'int-to-char': 159, 'or-int': 160, 'neg-int': 161, 'or-long': 162, 'rem-int/2addr': 163, 'aget-boolean': 164, 'aput-boolean': 165, 'add-long': 166, 'xor-int': 167, 'ushr-long/2addr': 168,
              'xor-long/2addr': 169, 'shl-long/2addr': 170, 'or-long/2addr': 171, 'mul-long/2addr': 172, 'div-long/2addr': 173, 'sub-long/2addr': 174, 'rem-int/lit16': 175, 'add-int/lit16': 176, 'int-to-byte': 177, 'int-to-short': 178,
              'rsub-int/lit8': 179, 'sget-wide': 180, 'sput-wide': 181, 'double-to-long': 182, 'rem-int': 183, 'ushr-long': 184, 'shl-long': 185, 'shr-long': 186, 'rem-long/2addr': 187, 'rem-int/lit8': 188, 'mul-long': 189, 'xor-long': 190,
              'and-long': 191, 'iput-byte': 192, 'iget-byte': 193, 'shr-long/2addr': 194, 'iput-short': 195, 'iget-short': 196, 'sget-char': 197, 'sput-char': 198, 'rem-double/2addr': 199, 'rem-double': 200, 'shr-int/2addr': 201, 'sput-byte': 202,
              'sget-byte': 203, 'ushr-int': 204, 'filled-new-array': 205, 'aget-short': 206, 'shr-int': 207, 'sget-short': 208, 'aput-short': 209, 'const-string/jumbo': 210, 'move-object/16': 211, 'move/16': 212, 'not-int': 213, 'ushr-int/2addr': 214,
              'xor-int/lit16': 215, 'sput-short': 216, 'filled-new-array/range': 217, 'goto/32': 218, 'move-wide/16': 219, 'move-res': 220}

def map_virus_file(dictionary,d_virus):
    txtfiles = []
    for file in glob.glob(d_virus):
        txtfiles.append(file)
    print(txtfiles)
    dic = {}
    j = 220 #getting from dict
    mapped_files_V = []
    for filename in txtfiles:
        with open(filename, "r") as file:
            lines = file.readlines()
            newfilename = filename + '.map'
            with open(newfilename, 'w') as newfile:
                for line in lines:
                    opcode = line.strip()
                    if opcode not in dic:
                        if opcode in dictionary:
                            dic[opcode] = dictionary[opcode]
                        else:
                            dic[opcode] = j
                            j = j + 1
                    newfile.write(str(dic[opcode]) + '\n')
    print(dictionary, dic)
    return mapped_files_V


map_file(directory_benign) #step1

# map_virus_file(dictionary, directory_virus) #step 1.1

