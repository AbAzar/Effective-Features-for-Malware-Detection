import glob
import antropy as ent
import numpy as np
import nolds
import EntropyHub as EH
from EntropyHub import MSobject


directory_B = r'C:\...\*.txt.map'
directory_V = r'C:\...\*.txt.map'


def feature_extraction(f_name, signal):
    length = len(signal)
    n_of_features = 10 # number of subsignals
    j = length//(n_of_features+1)
    fea = []
    mobj = MSobject()
    for i in range(n_of_features):
        start_window = i*j
        end_window = (i+2)*j
        subsignal = signal[start_window:end_window]
        fea.append(ent.sample_entropy(subsignal))
        # fea.append((ent.app_entropy(subsignal)))
        # fea.append(ent.detrended_fluctuation(subsignal))
        # fea += list(EH.MSEn(subsignal.astype('float16'), mobj)[0])
        # fea.append(EH.DistEn(subsignal.astype('float16'))[0])
        # fea.append(EH.DispEn(subsignal.astype('float16'))[0])
        # fea.append(ent.lziv_complexity(subsignal.astype('float16')))
        # fea.append(nolds.dfa(subsignal))
        # fea += list(EH.K2En(subsignal.astype('float16'), r=np.std(subsignal) or .00001)[0])
        # fea.append(nolds.hurst_rs(subsignal))
        # fea.append(EH.CoSiEn(subsignal.astype('float16'))[0])
        # fea.append(EH.SyDyEn(subsignal.astype('float16'))[0])
        # fea.append(EH.IncrEn(subsignal.astype('float16')))
        # fea.append(EH.PhasEn(subsignal.astype('float16')))
        # fea += list(EH.rMSEn(subsignal.astype('float16'), mobj)[0])
        # fea += list(EH.hMSEn(subsignal.astype('float16'), mobj)[0])
        # fea.append(EH.AttnEn(subsignal.astype('float16'))[0])
# =====================================================
# whole signal
#     fea.append(ent.sample_entropy(signal))
#     fea.append(ent.app_entropy(signal))
#     fea.append(ent.detrended_fluctuation(signal))
#     fea += list(EH.MSEn(signal.astype('float16'), mobj)[0])
#     fea.append(EH.DistEn(signal.astype('float16'))[0])
#     fea.append(EH.DispEn(signal.astype('float16'))[0])
#     fea.append(nolds.dfa(signal))
#     fea += list(EH.K2En(signal.astype('float16'), r=np.std(signal) or .00001)[0])
#     fea.append(nolds.hurst_rs(signal))
#     fea.append(EH.CoSiEn(signal.astype('float16'))[0])
#     fea.append(EH.SyDyEn(signal.astype('float16'))[0])
#     fea.append(EH.IncrEn(signal.astype('float16')))
#     fea.append(EH.PhasEn(signal.astype('float16')))
#     fea += list(EH.rMSEn(signal.astype('float16'), mobj)[0])
#     fea += list(EH.hMSEn(signal.astype('float16'), mobj)[0])
#     fea += list(EH.cMSEn(signal.astype('float16'), mobj)[0])
    return np.array(fea)


def all_filename(d):
    map_files = []
    for file in glob.glob(d):
        map_files.append(file)
    return map_files


def make_list(d):
    list_f = []
    f_name = []
    max_n = 0
    for file in all_filename(d):
        # print(len(file))
        with open(file, 'r') as B_file:
            lines = B_file.readlines()
            list_l = []
            for line in lines:
                if int(line.strip()) >= max_n:
                    max_n = int(line.strip())
                list_l.append(int(line.strip()))
            if len(list_l) >= 500:
                list_f.append(list_l)
                f_name.append(file)

    return list_f, f_name


benign, f_name_B = make_list(directory_B)
virus, f_name_V = make_list(directory_V)
print(len(benign), len(virus))
mix_list = benign + virus
f_name_mix_list = f_name_B + f_name_V


def cal_len_max_min_mean(m_list):
    m_list = np.array(m_list)
    max1 = 0
    min1 = 1000000000000000000000000
    l = []
    for i in m_list:
        l.append(len(i))
        # print(len(i))
        if len(i) > max1:
            max1 = len(i)
        if min1 > len(i):
            min1 = len(i)

    print(max1, min1, np.mean(np.array(l)))

fractal_dimensions = []
for signal, file_name in zip(mix_list, f_name_mix_list):
    fractal_dimensions.append(feature_extraction(file_name, np.array(signal)))

np.save('...', fractal_dimensions)

label = np.array([0 for x in range(len(benign))]+[1 for x in range(len(virus))])

np.save('...', label)

